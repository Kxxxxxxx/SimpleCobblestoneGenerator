package kx.simplecobblegen.blocks;

import java.util.List;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.resources.I18n;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.InventoryHelper;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.BlockRenderLayer;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.text.TextComponentString;
import net.minecraft.util.text.TextFormatting;
import net.minecraft.world.World;
import net.minecraftforge.common.ForgeHooks;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;
import net.minecraftforge.items.CapabilityItemHandler;
import net.minecraftforge.items.IItemHandler;

import kx.simplecobblegen.SimpleCobblestoneGenerator;
import kx.simplecobblegen.config.ConfigClient;
import kx.simplecobblegen.inventory.GeneratorItemStackHandler;
import kx.simplecobblegen.tiles.TileEntityBlockGenerator;

/**
 * The Generator Block class, extends {@link Block}.
 */
public class BlockGenerator extends Block {
	/**
	 * The generator Tier.
	 */
	protected final int		tier;
	/**
	 * The Block that the Block-Generator will create.
	 */
	protected final Block	material;

	/**
	 * Constructor.
	 * 
	 * @param pName The Name used for the registry Name and the unlocalized Name
	 * @param pTier The Tier of the Block-Generator
	 * @param pMaterial The Block which will be generated by the Block-Generator
	 */
	public BlockGenerator(final String pName, final int pTier, final Block pMaterial) {
		super(Material.IRON);
		setLightLevel(0.5F);
		setCreativeTab(SimpleCobblestoneGenerator.modTab);
		setUnlocalizedName(pName);
		this.setRegistryName(new ResourceLocation(pName));
		this.tier = pTier;
		this.material = pMaterial;
	}

	@Override
	@SideOnly(Side.CLIENT)
	public void addInformation(final ItemStack stack, final EntityPlayer player, final List<String> tooltip, final boolean advanced) {
		tooltip.add(TextFormatting.GRAY
					+ I18n.format(	"simplecobblegen.tooltip.generator_1",
									ConfigClient.getTier(this.tier).slotLimit * ConfigClient.getTier(this.tier).slotNumber,
									this.material.getLocalizedName()));
		tooltip.add(TextFormatting.GRAY
					+ I18n.format(	"simplecobblegen.tooltip.generator_2",
									ConfigClient.getTier(this.tier).productCount,
									this.material.getLocalizedName(),
									ConfigClient.getTier(this.tier).processTime));
	}

	@Override
	public void breakBlock(final World world, final BlockPos pos, final IBlockState state) {
		final GeneratorItemStackHandler tileItemHandler = getOwnTileEntityInventory(world, pos, null);
		if (tileItemHandler != null) {
			for (int i = 0; i < tileItemHandler.getSlots(); i++) {
				InventoryHelper.spawnItemStack(world, pos.getX(), pos.getY(), pos.getZ(), tileItemHandler.extractItem(i, tileItemHandler.getSlotLimit(i), false));
			}
		}
		super.breakBlock(world, pos, state);
	}

	@Override
	public TileEntity createTileEntity(final World world, final IBlockState state) {
		return new TileEntityBlockGenerator().setTierAndMaterial(this.tier, this.material);
	}

	@SideOnly(Side.CLIENT)
	@Override
	public BlockRenderLayer getBlockLayer() {
		return BlockRenderLayer.CUTOUT;
	}

	@Override
	public boolean hasTileEntity(final IBlockState state) {
		return true;
	}

	@Override
	public boolean onBlockActivated(final World world, final BlockPos pos, final IBlockState state,
									final EntityPlayer player, final EnumHand hand, final EnumFacing side,
									final float hitX, final float hitY, final float hitZ) {
		if (world.isRemote) {
			return true;
		}
		final GeneratorItemStackHandler tileItemHandler = getOwnTileEntityInventory(world, pos, side);
		if (tileItemHandler == null) {
			return true;
		}
		if (player.isSneaking()) {
			player.sendMessage(new TextComponentString(this.material.getLocalizedName() + " x " + tileItemHandler.getInventoryCount()));
		}
		else {
			final ItemStack stack = tileItemHandler.extractFullItemStack(new ItemStack(this.material).getMaxStackSize());
			if (!stack.isEmpty()) {
				if (!player.inventory.addItemStackToInventory(stack)) {
					ForgeHooks.onPlayerTossEvent(player, stack, false);
				}
			}
		}
		return true;
	}

	private GeneratorItemStackHandler getOwnTileEntityInventory(final World world, final BlockPos pos, final EnumFacing side) {
		final TileEntity tile = world.getTileEntity(pos);
		if (tile != null && tile instanceof TileEntityBlockGenerator) {
			final IItemHandler tileItemHandler = tile.getCapability(CapabilityItemHandler.ITEM_HANDLER_CAPABILITY, side);
			if (tileItemHandler instanceof GeneratorItemStackHandler) {
				return (GeneratorItemStackHandler) tileItemHandler;
			}
		}
		return null;
	}
}
